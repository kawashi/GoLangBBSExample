// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "bbs-example-server": Application Contexts
//
// Command:
// $ goagen
// --design=BBS-Example/api/bbs-example-server/design
// --out=$(GOPATH)/src/BBS-Example/api/bbs-example-server
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// PingPingContext provides the ping ping action context.
type PingPingContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewPingPingContext parses the incoming request URL and body, performs validations and creates the
// context used by the ping controller ping action.
func NewPingPingContext(ctx context.Context, r *http.Request, service *goa.Service) (*PingPingContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PingPingContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PingPingContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// CreateUserPostContext provides the user_post create action context.
type CreateUserPostContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *UserPostPayload
}

// NewCreateUserPostContext parses the incoming request URL and body, performs validations and creates the
// context used by the user_post controller create action.
func NewCreateUserPostContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateUserPostContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateUserPostContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateUserPostContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// IndexUserPostContext provides the user_post index action context.
type IndexUserPostContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewIndexUserPostContext parses the incoming request URL and body, performs validations and creates the
// context used by the user_post controller index action.
func NewIndexUserPostContext(ctx context.Context, r *http.Request, service *goa.Service) (*IndexUserPostContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := IndexUserPostContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *IndexUserPostContext) OK(r *JSON) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
