// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "bbs-example-server": Models
//
// Command:
// $ goagen
// --design=BBS-Example/api/bbs-example-server/design
// --out=$(GOPATH)/src/BBS-Example/api/bbs-example-server
// --version=v1.3.1

package models

import (
	"BBS-Example/api/bbs-example-server/app"
	"context"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"time"
)

// UserPost Relational Model
type UserPost struct {
	ID        int `gorm:"primary_key"` // primary key
	Message   string
	CreatedAt time.Time  // timestamp
	DeletedAt *time.Time // nullable timestamp (soft delete)
	UpdatedAt time.Time  // timestamp
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m UserPost) TableName() string {
	return "user_posts"

}

// UserPostDB is the implementation of the storage interface for
// UserPost.
type UserPostDB struct {
	Db *gorm.DB
}

// NewUserPostDB creates a new storage type.
func NewUserPostDB(db *gorm.DB) *UserPostDB {
	return &UserPostDB{Db: db}
}

// DB returns the underlying database.
func (m *UserPostDB) DB() interface{} {
	return m.Db
}

// UserPostStorage represents the storage interface.
type UserPostStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*UserPost, error)
	Get(ctx context.Context, id int) (*UserPost, error)
	Add(ctx context.Context, userpost *UserPost) error
	Update(ctx context.Context, userpost *UserPost) error
	Delete(ctx context.Context, id int) error

	ListJSON(ctx context.Context) []*app.JSON
	OneJSON(ctx context.Context, id int) (*app.JSON, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *UserPostDB) TableName() string {
	return "user_posts"

}

// CRUD Functions

// Get returns a single UserPost as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *UserPostDB) Get(ctx context.Context, id int) (*UserPost, error) {
	defer goa.MeasureSince([]string{"goa", "db", "userPost", "get"}, time.Now())

	var native UserPost
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of UserPost
func (m *UserPostDB) List(ctx context.Context) ([]*UserPost, error) {
	defer goa.MeasureSince([]string{"goa", "db", "userPost", "list"}, time.Now())

	var objs []*UserPost
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *UserPostDB) Add(ctx context.Context, model *UserPost) error {
	defer goa.MeasureSince([]string{"goa", "db", "userPost", "add"}, time.Now())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding UserPost", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *UserPostDB) Update(ctx context.Context, model *UserPost) error {
	defer goa.MeasureSince([]string{"goa", "db", "userPost", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating UserPost", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *UserPostDB) Delete(ctx context.Context, id int) error {
	defer goa.MeasureSince([]string{"goa", "db", "userPost", "delete"}, time.Now())

	var obj UserPost

	err := m.Db.Delete(&obj, id).Error

	if err != nil {
		goa.LogError(ctx, "error deleting UserPost", "error", err.Error())
		return err
	}

	return nil
}
